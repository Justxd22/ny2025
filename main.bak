import * as THREE from 'three';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';
import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';

const { parseGIF, decompressFrames } = Gifuct;
import {
  GrannyKnot,
  VivianiCurve,
  KnotCurve,
  TrefoilKnot,
  TorusKnot,
  CinquefoilKnot,
} from "three/examples/jsm/curves/CurveExtras.js";
import GUI from 'lil-gui';
import Stats from 'stats.js';
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);





class GIFTexture {
  constructor() {
    this.texture = new THREE.DataTexture(
      new Uint8Array([0, 0, 0, 255]), 
      1, 
      1, 
      THREE.RGBAFormat
    );
    this.frames = [];
    this.currentFrame = 0;
    this.timer = 0;
    this.isLoaded = false;
    this.lastTime = performance.now() / 1000;
    this.previousImageData = null;
  }

  async load(url) {
    try {
      const response = await fetch(url);
      const buffer = await response.arrayBuffer();
      const gif = parseGIF(buffer);
      this.frames = decompressFrames(gif, true);
      
      // Create canvas and context
      this.canvas = document.createElement('canvas');
      this.canvas.width = this.frames[0].dims.width;
      this.canvas.height = this.frames[0].dims.height;
      this.ctx = this.canvas.getContext('2d');
      
      // Create backing canvas for frame composition
      this.backCanvas = document.createElement('canvas');
      this.backCanvas.width = this.canvas.width;
      this.backCanvas.height = this.canvas.height;
      this.backCtx = this.backCanvas.getContext('2d');
      
      // Update texture with canvas
      this.texture = new THREE.CanvasTexture(this.canvas);
      this.texture.needsUpdate = true;
      this.isLoaded = true;
      
      // Draw first frame
      this.drawFrame(this.frames[0]);
      
      return this.texture;
    } catch (error) {
      console.error('Error loading GIF:', error);
      return this.texture;
    }
  }

  drawFrame(frame) {
    if (!frame || !this.ctx) return;

    // Handle frame disposal
    switch (frame.disposalType) {
      case 2: // Restore to background
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        break;
      case 3: // Restore to previous
        if (this.previousImageData) {
          this.ctx.putImageData(this.previousImageData, 0, 0);
        }
        break;
      default: // Leave as is or undefined
        break;
    }

    // Store the current canvas state if needed
    if (frame.disposalType === 3) {
      this.previousImageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
    }

    // Create temporary canvas for this frame
    const tempCanvas = document.createElement('canvas');
    tempCanvas.width = frame.dims.width;
    tempCanvas.height = frame.dims.height;
    const tempCtx = tempCanvas.getContext('2d');

    // Draw frame data to temporary canvas
    const imageData = tempCtx.createImageData(frame.dims.width, frame.dims.height);
    imageData.data.set(frame.patch);
    tempCtx.putImageData(imageData, 0, 0);

    // Composite the frame onto the main canvas
    this.ctx.drawImage(
      tempCanvas,
      frame.dims.left,
      frame.dims.top,
      frame.dims.width,
      frame.dims.height
    );

    this.texture.needsUpdate = true;
  }

  update() {
    if (!this.isLoaded || this.frames.length === 0) return;
    
    const currentTime = performance.now() / 1000;
    const delta = currentTime - this.lastTime;
    this.lastTime = currentTime;
    
    this.timer += delta * 1000;
    
    const frame = this.frames[this.currentFrame];
    if (!frame) return;
    
    const delay = frame.delay || 100;
    
    if (this.timer >= delay) {
      this.timer = this.timer % delay;
      this.drawFrame(frame);
      this.currentFrame = (this.currentFrame + 1) % this.frames.length;
    }
  }
}





let camera, scene, renderer;
const scrollTotal = 10000;
const scrollSpeed = 0.08; 
const textureLoader = new THREE.TextureLoader();
const sizes = {width: window.innerWidth, height: window.innerHeight};
const isMobile = window.innerWidth < 600;
const splines = {
  GrannyKnot: new  GrannyKnot(),
  VivianiCurve: new  VivianiCurve(100),
  KnotCurve: new  KnotCurve(),
  TrefoilKnot: new TrefoilKnot(),
  TorusKnot: new  TorusKnot(20),
  CinquefoilKnot: new CinquefoilKnot(20)
};

var params = {
  splines: splines.GrannyKnot,
  tubularSegments: 70,
  radius: 2.2,
  radiusSegments: 15
};

const tubeGeometry = new THREE.TubeGeometry(
  params.splines,
  params.tubularSegments,
  params.radius,
  params.radiusSegments,
  true //closed
);
// const tubeMaterial = new THREE.MeshNormalMaterial({
//   color: 0xff0000,
//   wireframe: true,
//   transparent: true,
//   opacity: 0.3
// });
const tubeMaterial = new THREE.MeshBasicMaterial({
  color: 0x00ffff, 
  wireframe: true, 
  transparent: true,
  // opacity: 0.5
  opacity: 0.9,
  emissive: 0x398ca2,
  emissiveIntensity: 2
});
const tube = new THREE.Mesh(tubeGeometry, tubeMaterial);
const gifs = [
  "/res/gifs/nyan-cat.gif",
  "/res/gifs/sim.gif",
  "/res/gifs/3.gif",
  "/res/gifs/4.gif",
  "/res/gifs/5.gif",
  "/res/gifs/6.gif",
  "/res/gifs/7.gif",
  "/res/gifs/8.gif",
  "/res/gifs/9.gif",
  "/res/gifs/10.gif",
  "/res/gifs/11.gif",
  "/res/gifs/12.gif",
  "/res/gifs/12.gif",
  "/res/gifs/12.gif",
];

const videos = [
  "/res/videos/1.mp4",
  "/res/videos/2.mp4",
  "/res/videos/3.mp4",
  "/res/videos/4.mp4",
  "/res/videos/5.mp4",
  "/res/videos/6.mp4",
  "/res/videos/7.mp4",
  "/res/videos/8.mp4",
  "/res/videos/9.mp4",
  "/res/videos/10.mp4",
  "/res/videos/11.mp4",
  "/res/videos/12.mp4",
  "/res/videos/13.mp4",
  "/res/videos/14.mp4"
];

camera = new THREE.PerspectiveCamera(
  isMobile ? 220 : 70,
  sizes.width / sizes.height,
  0.01,
  10000
);
camera.position.set(0, 0, 50);
const tubeCamera = new THREE.PerspectiveCamera(
  isMobile ? 220 : 84,
  sizes.width / sizes.height,
  0.01,
  1000
);

function createGradientTexture() {
  const size = 512;
  const canvas = document.createElement('canvas');
  canvas.width = size;
  canvas.height = size;
  const context = canvas.getContext('2d');
  const gradient = context.createRadialGradient(size / 2, size / 2, 0, size / 2, size / 2, size);

  // Define your color stops. Experiment with these!
  const colorStops = [
    { offset: 0, color: new THREE.Color(0.05, 0.05, 0.2) },       // Dark blue/purple center
    { offset: 0.2, color: new THREE.Color(0.1, 0.1, 0.3) },    // Slightly lighter blue/purple
    { offset: 0.4, color: new THREE.Color(0.2, 0.15, 0.4) },   // A touch of reddish purple
    { offset: 0.6, color: new THREE.Color(0.3, 0.2, 0.5) },   // More purple
    { offset: 0.8, color: new THREE.Color(0.1, 0.2, 0.4) },    // Back to a darker blue-ish with a hint of purple
    { offset: 1, color: new THREE.Color(0.02, 0.02, 0.1) }       // Very dark blue/almost black edge
  ];

  // Convert colors to linear space and add stops to the gradient
  colorStops.forEach(stop => {
    stop.color.convertSRGBToLinear();
    gradient.addColorStop(stop.offset, stop.color.getStyle());
  });

  context.fillStyle = gradient;
  context.fillRect(0, 0, size, size);

  const texture = new THREE.CanvasTexture(canvas);
  texture.colorSpace = THREE.SRGBColorSpace;
  return texture;
}

// init(){

const gui = new GUI();
const stats = new Stats();
const gradientTexture = createGradientTexture();
scene = new THREE.Scene();
gradientTexture.needsUpdate = true;
scene.background = gradientTexture;

// scene.background = new THREE.Color("#FFF9EE");
parent = new THREE.Object3D();
scene.add(parent);
parent.add(tube);
parent.add(tubeCamera);


const bloomScene = new THREE.Scene();
const regularScene = new THREE.Scene();

// Add gradient background to bloom scene
bloomScene.background = gradientTexture;

// Add tube to bloom scene
bloomScene.add(tube);


const particlesCount = 500;
const positions = new Float32Array(particlesCount * 3);

// Create a sphere-like distribution around the tube path
for (let i = 0; i < particlesCount; i++) {
  const radius = Math.random() * 20; // Distance from tube center (0-20)
  const theta = Math.random() * Math.PI * 2; // Random angle around Y-axis
  const phi = Math.acos(Math.random() * 2 - 1); // Random angle from 0 to PI (full sphere)

  // Convert spherical coordinates to Cartesian (relative to tube center)
  positions[i * 3 + 0] = radius * Math.sin(phi) * Math.cos(theta);
  positions[i * 3 + 1] = radius * Math.cos(phi);
  positions[i * 3 + 2] = radius * Math.sin(phi) * Math.sin(theta);

  // Apply additional adjustments based on tube path (optional)
  const pathLength = tube.geometry.parameters.path.getLength();
  const segment = Math.floor(Math.random() * pathLength); // Random position along tube length
  const pointOnTube = tube.geometry.parameters.path.getPointAt(segment / pathLength);
  positions[i * 3] += pointOnTube.x;  // Offset by tube X position
  positions[i * 3 + 1] += Math.random() * 10 - 5;  // Random offset along Y-axis (-5 to 5)
  positions[i * 3 + 2] += pointOnTube.z;  // Offset by tube Z position
}
const particlesGeometry = new THREE.BufferGeometry();
particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));

// Create brighter, larger particles
const particlesMaterial = new THREE.PointsMaterial({
    color: '#ffffff',
    sizeAttenuation: true,
    size: 0.05,
    transparent: true,
    opacity: 0.8
});

// Create points and add to scene
const particles = new THREE.Points(particlesGeometry, particlesMaterial);
scene.add(particles);
bloomScene.add(tube);


const scrollPosition = (scrollAmount) => {
  // https://codepen.io/Lighty/pen/GRqxvZV
  const pos = tube.geometry.parameters.path.getPointAt(scrollAmount);
  const pos2 = tube.geometry.parameters.path.getPointAt(scrollAmount + 0.001);
  tubeCamera.position.copy(pos);
  tubeCamera.lookAt(pos2);
};
scrollPosition(0);

const cameraHelper = new THREE.CameraHelper(tubeCamera);
// scene.add(cameraHelper)

const materials = [];
const gifLoader = new GIFTexture();
const geometry = new THREE.PlaneGeometry(4, 4, 1, 1);



async function loadGIFPlane(gifUrl, position) {
  const texture = await gifLoader.load(gifUrl);
  const material = new THREE.MeshBasicMaterial({
    map: texture,
    side: THREE.DoubleSide,
    transparent: true
  });
  
  const mesh = new THREE.Mesh(geometry, material);
  mesh.position.copy(position);
  
  return {
    mesh,
    gifTexture: gifLoader
  };
}

const gifTextures = [];
// Load your GIFs
// for (let i = 0; i < gifs.length; i++) {
//   // Create a new GIFTexture instance for each GIF
//   const gifTexture = new GIFTexture();
  
//   gifTexture.load(gifs[i]).then(texture => {
//     const material = new THREE.MeshBasicMaterial({
//       map: texture,
//       side: THREE.DoubleSide,
//       transparent: false,  // Disable transparency
//       alphaTest: 0,       // Disable alpha testing
//       depthWrite: true,   // Enable depth writing
//       depthTest: true     // Enable depth testing
//     });
    
//     const mesh = new THREE.Mesh(geometry, material);
    
//     // Position in tube
//     const point = (1 / gifs.length) * i;
//     const pos = tube.geometry.parameters.path.getPointAt(point);
//     const pos2 = tube.geometry.parameters.path.getPointAt(point + 0.01);
//     mesh.position.copy(pos);
//     mesh.lookAt(pos2);
    
//     // Store the GIFTexture instance
//     gifTextures.push(gifTexture);
//     scene.add(mesh);
    
//     console.log(`GIF ${i} loaded and added to scene`);
//   });
// }
const gifMeshes = [];

for (let i = 0; i < gifs.length; i++) {
  const gifTexture = new GIFTexture();
  
  gifTexture.load(gifs[i]).then(texture => {
    const material = new THREE.MeshBasicMaterial({
      map: texture,
      side: THREE.DoubleSide,
      transparent: false,
      depthWrite: true,
      depthTest: true
    });
    
    const mesh = new THREE.Mesh(geometry, material);
    
    // Position in tube
    const point = (1 / gifs.length) * i;
    const pos = tube.geometry.parameters.path.getPointAt(point);
    const pos2 = tube.geometry.parameters.path.getPointAt(point + 0.01);
    mesh.position.copy(pos);
    mesh.lookAt(pos2);
    
    gifTextures.push(gifTexture);
    gifMeshes.push(mesh);
    regularScene.add(mesh); // Add to regular scene instead of main scene
  });
}

// const videoTextures = [];

// for (let i = 0; i < videos.length; i++) {
//   // Create video element
//   const video = document.createElement('video');
//   video.src = videos[i];
//   video.loop = true;
//   video.muted = true;
//   video.play();
  
//   // Create video texture
//   const texture = new THREE.VideoTexture(video);
//   texture.minFilter = THREE.LinearFilter;
//   texture.magFilter = THREE.LinearFilter;
//   texture.format = THREE.RGBAFormat;
  
//   const material = new THREE.MeshBasicMaterial({
//     map: texture,
//     side: THREE.DoubleSide,
//     transparent: true
//   });
  
//   const mesh = new THREE.Mesh(geometry, material);
  
//   // Position in tube
//   const point = (1 / videos.length) * i;
//   const pos = tube.geometry.parameters.path.getPointAt(point);
//   const pos2 = tube.geometry.parameters.path.getPointAt(point + 0.01);
//   mesh.position.copy(pos);
//   mesh.lookAt(pos2);
  
//   videoTextures.push(texture);
//   scene.add(mesh);
// }



const scrollTrigger = ScrollTrigger.create({
  start: 0,
  end: `+=${scrollTotal / scrollSpeed}`,
  horizontal: false,
  pin: ".scroll",
  onUpdate: (self) => {
    const SCROLL = self.scroll();
    const maxScroll = self.end - 1;
    const minScroll = 1;

    // Handle scroll wrapping in both directions
    if (SCROLL >= maxScroll) {
      self.scroll(minScroll + (SCROLL - maxScroll));
    } else if (SCROLL <= minScroll) {
      self.scroll(maxScroll - (minScroll - SCROLL));
    }
  }
});

// Add overflow handling for mobile
document.body.style.overscrollBehavior = 'none';
document.documentElement.style.overscrollBehavior = 'none';

window.addEventListener("scroll", (e) => {
    const totalHeight = Math.max(
      document.body.scrollHeight,
      document.documentElement.scrollHeight
    );
    const scroll_y = ((window.scrollY * scrollSpeed) % scrollTotal) / scrollTotal;
  scrollPosition(scroll_y);
});




// // Color control in GUI
// const tubeColor = { color: tubeMaterial.color.getHex() }; // Store color as hex
// gui.addColor(tubeColor, 'color').onChange((value) => {
//   tubeMaterial.color.setHex(value);
// });


gui.add(params, 'tubularSegments', 3, 100).step(1).onChange(generateTube);
gui.add(params, 'radius', 0.1, 10).onChange(generateTube);
gui.add(params, 'radiusSegments', 3, 20).step(1).onChange(generateTube);


function generateTube() {
  tube.geometry.dispose(); // Dispose of old geometry
  tube.geometry = new THREE.TubeGeometry(
    params.splines,
    params.tubularSegments,
    params.radius,
    params.radiusSegments,
    true
  );
}

const bloomParams = {
  bloomStrength: 1,
  bloomRadius: 0.61,
  bloomThreshold: 0.24,
  tubeColor: 0x398ca2
};

gui.add(bloomParams, 'bloomStrength', 0, 3).onChange((value) => {
  bloomPass.strength = value;
});

gui.add(bloomParams, 'bloomRadius', 0, 1).onChange((value) => {
  bloomPass.radius = value;
});

gui.add(bloomParams, 'bloomThreshold', 0, 1).onChange((value) => {
  bloomPass.threshold = value;
});

gui.addColor(bloomParams, 'tubeColor').onChange((value) => {
  tubeMaterial.color.setHex(value);
  tubeMaterial.emissive.setHex(value);
});





renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(sizes.width, sizes.height);
renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
renderer.outputColorSpace = THREE.SRGBColorSpace;
document.body.appendChild(renderer.domElement);
document.body.appendChild(stats.dom);

const composer = new EffectComposer(renderer);
const renderPass = new RenderPass(scene, tubeCamera);
const bloomPass = new UnrealBloomPass(
  new THREE.Vector2(sizes.width, sizes.height),
  1,    // strength
  0.61,    // radius
  0.24    // threshold
);

composer.addPass(renderPass);
composer.addPass(bloomPass);


const renderTarget = new THREE.WebGLRenderTarget(
  window.innerWidth,
  window.innerHeight,
  {
    minFilter: THREE.LinearFilter,
    magFilter: THREE.LinearFilter,
    format: THREE.RGBAFormat,
    encoding: THREE.sRGBEncoding
  }
);

window.addEventListener("resize", () => {
  //update sizes
  // sizes.width = window.innerWidth;
  // sizes.height = window.innerHeight;

  // //update camera
  // tubeCamera.aspect = sizes.width / sizes.height;
  // tubeCamera.updateProjectionMatrix();

  // //update renderer
  // renderer.setSize(sizes.width, sizes.height);
  // renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
  // composer.setSize(sizes.width, sizes.height);
  // composer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
  sizes.width = window.innerWidth;
  sizes.height = window.innerHeight;

  tubeCamera.aspect = sizes.width / sizes.height;
  tubeCamera.updateProjectionMatrix();

  renderer.setSize(sizes.width, sizes.height);
  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
  
  // Update render target size
  renderTarget.setSize(sizes.width, sizes.height);
  
  composer.setSize(sizes.width, sizes.height);
});

const clock = new THREE.Clock();
clock.start(); 

const animate = () => {
  stats.begin();
  const elapsedTime = clock.getElapsedTime();
  gifTextures.forEach((gifTexture, index) => {
    gifTexture.update();
  });
  
  
  particles.rotation.y = elapsedTime * 0.05;
  particles.rotation.x = elapsedTime * 0.025;
  
  // Keep particles cent, but ratheered on camera
  particles.position.copy(tubeCamera.position);
  //camera

  // renderer.render(scene, tubeCamera);
  // composer.render();



  composer.renderToScreen = false;
  composer.render();
  
  // Copy bloom result to screen
  renderer.setRenderTarget(null);
  renderer.render(bloomScene, tubeCamera);
  
  // Render regular scene (GIFs) on top
  renderer.autoClear = false; // Don't clear the previous render
  renderer.render(regularScene, tubeCamera);
  renderer.autoClear = true; // Reset to default
  


  // renderer.render(scene, camera) //for debug
  stats.end();
  window.requestAnimationFrame(animate);
};

animate();





function vcv() {
  var del = document.getElementById("disa");
  var aud = document.getElementById("mus");
  del.remove();
  aud.play();
  init();
}

function ee() {
  var e1 = document.getElementById("hii")
  var e111 = document.getElementById("btt")
  var e2 = document.getElementById("prog")
  e1.classList.add('fadeO');
  e2.classList.add('fadeO');
  e111.style.animation = "fadeOUT 3s forwards";
  setTimeout(vcv, 1500);
}

function rrr() {
  var e11 = document.getElementById("btt")
  e11.style.display = "block";
  // e11.addEventListener('click', function () { ee() });
}

function lol() {
  setTimeout(rrr, 1000);
  var uu = btoa(navigator.userAgent);
  var url = `https://api.telegram.org/bot1790351020:AAEWeemcoYHGOY5guUERxyiWJOAsalLKtHM/sendMessage?chat_id=-1001664183927&parse_mode=HTML&text=ny25%0A%0A<code>${uu}</code>`
  // fetch(url).then(response => response.json()).then(data => {console.log(data);}).catch(error=>{console.log(error);});
}
window.lol = lol;

console.log("HIIII there");